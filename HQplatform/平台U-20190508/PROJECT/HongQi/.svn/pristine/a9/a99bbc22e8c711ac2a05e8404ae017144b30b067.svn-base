<?xml version="1.0" encoding="utf-8" ?>
<Function id="Switch_Status_Check_view_8bit_VW" description="--[[*****************************************************************************&#13;&#10;this function is used to compare onebyte bit &#13;&#10;input parameter:         PramIn ; 首次参数必须为nil;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;:PramIn.timeout;计时&#13;&#10;                        :PramIn.timeoutFlag ;超时标志 true : 超时 ; false :未超时&#13;&#10;                        :PramIn.errflag = 0;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;:PramIn.okFlag ;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;:PramIn.okCount ;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;:PramIn.nokCount ;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;:PramIn.timestart = os.clock();&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;:PramIn.duration = 0;&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;:PramIn.durationStart = os.clock();&#13;&#10;&#9;&#9;&#9;&#9;&#9;&#9;:PramIn.FinishFlag ;&#13;&#10;                                                :PramIn.StatValue ;&#13;&#10;                                                :PramIn.StatTarget ;&#13;&#10;&#13;&#10;&#9;&#9;&#9;&#9;LineNr ;&#13;&#10;                LastErr;&#13;&#10;&#9;&#9;&#9;&#9;TextCmp;&#13;&#10;&#9;&#9;&#9;&#9;MeasInt;&#13;&#10;&#9;&#9;&#9;&#9;RightViewText;&#13;&#10;&#9;&#9;&#9;&#9;CType ; 1,OK计数，2，NOK计数，3，OK计时，4，NOK计时&#13;&#10;&#9;&#9;&#9;&#9;OKcount;  计数或者算秒&#13;&#10;&#9;&#9;&#9;&#9;NOKcount; 计数或者算秒&#13;&#10;&#9;&#9;&#9;&#9;TimeOut; 超时 秒&#13;&#10;&#9;&#9;&#9;&#9;BarType;  保留&#13;&#10;&#9;&#9;&#9;&#9;DialogHandle;保留&#13;&#10;&#9;&#9;&#9;&#9;&#13;&#10;&#9;&#9;&#9;&#9;&#13;&#10;output parameter :FinishFlag ; true / false&#13;&#10;&#9;&#9;&#9;&#9;  PramOut;&#13;&#10;&#9;&#9;&#9;&#9; &#13;&#10;                   &#13;&#10;created by zhouxh 05/18/2016&#13;&#10;******************************************************************************--]]">
<Inputs>
<Variable id="PramIn" type="8" data="Pram_1" description="参数留存表  首次必须为nil"/>
<Variable id="LineNr" type="3" data="1" description="显示行"/>
<Variable id="TextCmp" type="8" data="&quot;&quot;" description="比对文本 &quot;111?0???&quot;"/>
<Variable id="DialogHandle" type="3" data="0" description="保留未开放"/>
<Variable id="LastErr" type="3" data="0" description="读服务的返回Err （注意使用）"/>
<Variable id="RightViewText" type="8" data="&quot;&quot;" description="右边框显示文字"/>
<Variable id="CType" type="3" data="1" description="1,OK计数，2，NOK计数，3，OK计时，4，NOK计时"/>
<Variable id="OKcount" type="3" data="1" description="计数或者算秒"/>
<Variable id="NOKcount" type="3" data="0" description="计数或者算秒"/>
<Variable id="TimeOut" type="3" data="10" description="超时 秒"/>
<Variable id="RecvTel" type="8" data="RecvTel" description="tp2000 ID data group"/>
<Variable id="Measurenummer" type="3" data="1" description="Number of measure value"/>
</Inputs>
<Outputs>
<Variable id="FinishFlag" type="11" data="" description="true 完成退出  false 未完成"/>
<Variable id="PramOut" type="8" data="" description="表,循环中为下次参数"/>
</Outputs>
<Script>--[[*****************************************************************************
this function is used to compare onebyte bit 
input parameter:         PramIn ; 首次参数必须为nil;
						:PramIn.timeout;计时
                        :PramIn.timeoutFlag ;超时标志 true : 超时 ; false :未超时
                        :PramIn.errflag = 0;
						:PramIn.okFlag ;
						:PramIn.okCount ;
						:PramIn.nokCount ;
						:PramIn.timestart = os.clock();
						:PramIn.duration = 0;
						:PramIn.durationStart = os.clock();
						:PramIn.FinishFlag ;
                                                :PramIn.StatValue ;
                                                :PramIn.StatTarget ;

				LineNr ;
                LastErr;
				TextCmp;
				MeasInt;
				RightViewText;
				CType ; 1,OK计数，2，NOK计数，3，OK计时，4，NOK计时
				OKcount;  计数或者算秒
				NOKcount; 计数或者算秒
				TimeOut; 超时 秒
				BarType;  保留
				DialogHandle;保留
				
				
output parameter :FinishFlag ; true / false
				  PramOut;
				 
                   
created by zhouxh 05/18/2016
******************************************************************************--]]

local viewText ;
local  i ;
local MeasIntText = "";
local ret = false;
local bitNum ;
local bitStr;
local valueView;
local M_byte_1,M_byte_2,M_byte_3;
local MeasureTextNummer_ecu;

if( LastErr ~= 0) then

viewText = "Read service Err ";
--PramOut.errflag = LastErr ;
engine.LastError = LastErr;
FinishFlag = true;
engine.StatValue = viewText;
engine.SetLineText(LineNr,"#L=" .. viewText .. "#R=bmpnok");
engine.ShowMessage();

else

if(type(vx_diag) ~= "function" ) then

local path = engine.ProgPath .. "vw_diag.ini";
LibVW.vw_diag_load(path);

end;

if(string.len(RecvTel) &gt;= ((Measurenummer)*3)) then
                        Measurenummer = Measurenummer - 1;
		  local MessureString = string.sub(RecvTel,(Measurenummer*3+1),(Measurenummer*3)+3);
			M_byte_1 =string.byte(MessureString,1);
			M_byte_2 =string.byte(MessureString,2);
			M_byte_3 =string.byte(MessureString,3);
			--engine.println(M_byte_1..M_byte_2..M_byte_3);engine.println('\n');
	if ((string.byte(MessureString,1) == 37) or (string.byte(MessureString,1) == 141)) then
		MeasureTextNummer_ecu = string.byte(MessureString,2)*256 + string.byte(MessureString,3);
		valueView = vx_diag(M_byte_1,M_byte_2,M_byte_3);
	end
end

MeasInt = MeasureTextNummer_ecu
-- parameter set
		if (PramIn == nil) then  
			PramOut = {};
			PramOut.timeout = 0;
			PramOut.timeoutFlag = false;
			PramOut.timestart = os.clock();
			PramOut.errflag = 0;
			PramOut.okFlag = false;
                        PramOut.FinishFlag = false;
			PramOut.StatValue = "";
			PramOut.StatTarget = "";
			
			if(CType == 1) then PramOut.okCount = 0   end;
			if(CType == 2) then PramOut.nokCount = 0  end;
			if(CType == 3) then PramOut.duration = 0; PramOut.durationStart = os.clock(); end;
			if(CType == 4) then PramOut.duration = 0; PramOut.durationStart = os.clock(); end;
	
		else   
		PramOut = PramIn;
		end;
		
		
-- CType do loop
-- OKcount
		if(CType == 1) then
			if(MeasInt == nil) then  
				PramOut.errflag = 2 ; PramOut.StatValue = "nil";PramOut.StatTarget = tostring(TextCmp); PramOut.FinishFlag = true;
			else

			    for i = 0,7 do 
				bitNum = bit32.extract(MeasInt,7-i,1);
				MeasIntText = MeasIntText..tostring(bitNum);
				end;
				if( PramOut.okFlag == false and PramOut.timeoutFlag == false) then
				engine.SetLineText(LineNr,"#L="..tostring(TextCmp)..":"..tostring(MeasIntText).."#R="..tostring(RightViewText));
				engine.ShowMessage();
				PramOut.StatValue = tostring(MeasIntText);
				PramOut.StatTarget = tostring(TextCmp);
				end;
				
				for i = 0, 7 do 
					bitStr = TextCmp:sub(1+i,1+i);
					bitNum = bit32.extract(MeasInt,7-i,1);

						if(bitStr == "0" and bitNum == 0) then 
						ret = true;
						elseif( bitStr == "1" and bitNum ==1) then
						ret = true;
						elseif (bitStr == "?") then
						ret = true;
						else
						ret = false;
						break;
						end; 

				end; 
				
				if(ret == true )  then
					PramOut.okCount = PramOut.okCount + 1 ;
						if(PramOut.okCount &gt;= OKcount and PramOut.okFlag == false) then
							engine.SetLineText(LineNr,"#L="..tostring(TextCmp)..":"..tostring(MeasIntText).."#R=bmpok");
							engine.ShowMessage();
							PramOut.StatValue = tostring(MeasIntText);
							PramOut.StatTarget = tostring(TextCmp);
							PramOut.errflag = 0 ;
							PramOut.okFlag = true;
							PramOut.FinishFlag = true;
						end;
				end;
				
				if(PramOut.okFlag == false  and  PramOut.timeout &gt;= TimeOut)  then
					engine.SetLineText(LineNr,"#L="..tostring(TextCmp)..":"..tostring(MeasInt).."#R=bmpnok");
					engine.ShowMessage();
					PramOut.StatValue = tostring(MeasIntText);
					PramOut.StatTarget = tostring(TextCmp);
					PramOut.errflag = 7 ;
					PramOut.okFlag = false;
					PramOut.timeoutFlag = true;
					PramOut.FinishFlag = true;
				end;
			
			
			end;		
			
		end;
--NOKcount
		if(CType == 2) then
			if(MeasInt == nil) then  
				PramOut.errflag = 2 ; PramOut.StatValue = "nil";PramOut.StatTarget = tostring(TextCmp); PramOut.FinishFlag = true;
			else
			    for i = 0,7 do 
				bitNum = bit32.extract(MeasInt,7-i,1);
				MeasIntText = MeasIntText..tostring(bitNum);
				end;
				if( PramOut.okFlag == false and PramOut.timeoutFlag == false) then
				engine.SetLineText(LineNr,"#L="..tostring(TextCmp)..":"..tostring(MeasIntText).."#R="..tostring(RightViewText));
				engine.ShowMessage();
				PramOut.StatValue = tostring(MeasIntText);
				PramOut.StatTarget = tostring(TextCmp);
				end;
				
				for i = 0, 7 do 
					bitStr = TextCmp:sub(1+i,1+i);
					bitNum = bit32.extract(MeasInt,7-i,1);

						if(bitStr == "0" and bitNum == 0) then 
						ret = true;
						elseif( bitStr == "1" and bitNum ==1) then
						ret = true;
						elseif (bitStr == "?") then
						ret = true;
						else
						ret = false;
						break;
						end; 

				end; 
				
				if(ret == false )  then
					PramOut.nokCount = PramOut.nokCount + 1 ;
						if(PramOut.nokCount &gt;= NOKcount and PramOut.okFlag == false) then
							engine.SetLineText(LineNr,"#L="..tostring(TextCmp)..":"..tostring(MeasIntText).."#R=bmpok");
							engine.ShowMessage();
							PramOut.StatValue = tostring(MeasIntText);
							PramOut.StatTarget = tostring(TextCmp);
							PramOut.errflag = 0 ;
							PramOut.okFlag = true;
							PramOut.FinishFlag = true;
						end;
				end;
				
				if(PramOut.okFlag == false  and  PramOut.timeout &gt;= TimeOut)  then
					engine.SetLineText(LineNr,"#L="..tostring(TextCmp)..":"..tostring(MeasIntText).."#R=bmpnok");
					engine.ShowMessage();
					PramOut.StatValue = tostring(MeasIntText);
					PramOut.StatTarget = tostring(TextCmp);
					PramOut.errflag = 7 ;
					PramOut.okFlag = false;
					PramOut.timeoutFlag = true;
					PramOut.FinishFlag = true;
				end;
			
			
			end;		
			
		end;		

--OKcount time
		if(CType == 3) then
			if(MeasInt == nil) then  
				PramOut.errflag = 2 ; PramOut.StatValue = "nil";PramOut.StatTarget = tostring(TextCmp); PramOut.FinishFlag = true;
			else
			    for i = 0,7 do 
				bitNum = bit32.extract(MeasInt,7-i,1);
				MeasIntText = MeasIntText..tostring(bitNum);
				end;
				if( PramOut.okFlag == false and PramOut.timeoutFlag == false) then
				engine.SetLineText(LineNr,"#L="..tostring(TextCmp)..":"..tostring(MeasIntText).."#R="..tostring(RightViewText));
				engine.ShowMessage();
				PramOut.StatValue = tostring(MeasIntText);
				PramOut.StatTarget = tostring(TextCmp);
				end;
				
				for i = 0, 7 do 
					bitStr = TextCmp:sub(1+i,1+i);
					bitNum = bit32.extract(MeasInt,7-i,1);

						if(bitStr == "0" and bitNum == 0) then 
						ret = true;
						elseif( bitStr == "1" and bitNum ==1) then
						ret = true;
						elseif (bitStr == "?") then
						ret = true;
						else
						ret = false;
						break;
						end; 

				end;
				
				if(ret == true )  then
					PramOut.duration = os.clock() - PramOut.durationStart;
						if(PramOut.duration &gt;= OKcount and PramOut.okFlag == false) then
							engine.SetLineText(LineNr,"#L="..tostring(TextCmp)..":"..tostring(MeasIntText).."#R=bmpok");
							engine.ShowMessage();
							PramOut.StatValue = tostring(MeasIntText);
							PramOut.StatTarget = tostring(TextCmp);
							PramOut.errflag = 0 ;
							PramOut.okFlag = true;
							PramOut.FinishFlag = true;
						end;
				else
				PramOut.duration = 0;
				PramOut.durationStart = os.clock();
				end;
				
				if(PramOut.okFlag == false  and  PramOut.timeout &gt;= TimeOut)  then
					engine.SetLineText(LineNr,"#L="..tostring(TextCmp)..":"..tostring(MeasIntText).."#R=bmpnok");
					engine.ShowMessage();
					PramOut.StatValue = tostring(MeasIntText);
					PramOut.StatTarget = tostring(TextCmp);
					PramOut.errflag = 7 ;
					PramOut.okFlag = false;
					PramOut.timeoutFlag = true;
					PramOut.FinishFlag = true;
				end;
			
			
			end;		
			
		end;
--NOKcount time
		if(CType == 4) then
			if(MeasInt == nil) then  
				PramOut.errflag = 2 ; PramOut.StatValue = "nil";PramOut.StatTarget = tostring(TextCmp); PramOut.FinishFlag = true;
			else
			    for i = 0,7 do 
				bitNum = bit32.extract(MeasInt,7-i,1);
				MeasIntText = MeasIntText..tostring(bitNum);
				end;
				if( PramOut.okFlag == false and PramOut.timeoutFlag == false) then
				engine.SetLineText(LineNr,"#L="..tostring(TextCmp)..":"..tostring(MeasIntText).."#R="..tostring(RightViewText));
				engine.ShowMessage();
				PramOut.StatValue = tostring(MeasIntText);
				PramOut.StatTarget = tostring(TextCmp);
				end;
				
				for i = 0, 7 do 
					bitStr = TextCmp:sub(1+i,1+i);
					bitNum = bit32.extract(MeasInt,7-i,1);

						if(bitStr == "0" and bitNum == 0) then 
						ret = true;
						elseif( bitStr == "1" and bitNum ==1) then
						ret = true;
						elseif (bitStr == "?") then
						ret = true;
						else
						ret = false;
						break;
						end; 

				end;
				
				if(ret == false )  then
					PramOut.duration = os.clock() - PramOut.durationStart;
						if(PramOut.duration &gt;= NOKcount and PramOut.okFlag == false) then
							engine.SetLineText(LineNr,"#L="..tostring(TextCmp)..":"..tostring(MeasIntText).."#R=bmpok");
							engine.ShowMessage();
							PramOut.StatValue = tostring(MeasIntText);
							PramOut.StatTarget = tostring(TextCmp);
							PramOut.errflag = 0 ;
							PramOut.okFlag = true;
							PramOut.FinishFlag = true;
						end;
				else
				PramOut.duration = 0;
				PramOut.durationStart = os.clock();
				end;
				
				if(PramOut.okFlag == false  and  PramOut.timeout &gt;= TimeOut)  then
					engine.SetLineText(LineNr,"#L="..tostring(TextCmp)..":"..tostring(MeasIntText).."#R=bmpnok");
					engine.ShowMessage();
					PramOut.StatValue = tostring(MeasIntText);
					PramOut.StatTarget = tostring(TextCmp);
					PramOut.errflag = 7 ;
					PramOut.okFlag = false;
					PramOut.timeoutFlag = true;
					PramOut.FinishFlag = true;
				end;
			
			
			end;		
			
		end;
	
PramOut.timeout = os.clock() - PramOut.timestart;	
engine.StatValue = PramOut.StatValue;
engine.StatTarget = PramOut.StatTarget;			
engine.LastError = PramOut.errflag ;
FinishFlag = PramOut.FinishFlag;
end;</Script></Function>

