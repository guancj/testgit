<?xml version="1.0" encoding="utf-8" ?>
<Function>
<Inputs>
<Variable id="zdcHndl" type="3" data="0" description="ZDC handle"/>
<Variable id="modusFilter" type="8" data="&quot;&quot;" description="ZDC &apos;MODUSTEIL&apos; filter, e.g. &quot;K1&quot;. set empty return all MODUSTEIL value"/>
<Variable id="debugLevel" type="3" data="0" description="debug level 0,1,2,3,4,5"/>
</Inputs>
<Outputs>
<Variable id="calibString" type="8" data="0" description="The calibration value form ZDC container"/>
</Outputs>
<Script>--[[ ***************************************************************
The function is use to caculate zdc Calibration value which modus is 'K'
History:
	02/01/2016, wuh : function created
	04/11/2016, wuh : add debugLevel
	01/19/2017, wuh : if the codeLen is 0, then skip the block.(To handle 'UEBERSPRINGEN' value situation)
****************************************************************--]]
	local err = 0
	local calibString = ""

	-- **** precondition check **** --
	if nil == zdcHndl then 
		engine.StatValue = "input zdc handle is invalid"
		engine.println("ERROR, ZdcCalcCalibration : input zdc handle is invalid, zdcHndl= " .. tostring(zdcHndl))
		engine.LastError = 1 ;  calibString = ""
		return calibString
	end	
	-- **** get all 'TABELLE' which belong to modus 'K' ****--
	local xpath = "/ZDC/VORSCHRIFT/DIREKT/TABELLEN/TABELLE/MODUS[text()='K']/.."
	local nodeTabelles = zdcHndl.selectNodes(xpath)
	if nil == nodeTabelles then 
		engine.StatValue = "no zdc calibration in zdc container"
		engine.println("WARNING, ZdcCalcCalibration : Modus tables not found , xpath = " .. xpath)
		engine.LastError = 0 ; calibString=""
		return calibString
	end
	
	-- **** Caculate all 'TABELLE's **** --
	local blockSum, tmpResStr = 0, ""
	for i=0, nodeTabelles.length-1, 1 do
		local nodeTabelle = nodeTabelles[i]
		if "" == modusFilter or nodeTabelle.selectSingleNode("MODUSTEIL").text == modusFilter then
			if debugLevel &gt; 0 then
				engine.println("ZdcCalcCalibration, start caculate new table",
					"MODUSTEIL=" .. tostring(nodeTabelle.selectSingleNode("MODUSTEIL").text),
					"BESCHREIBUNG=" .. tostring(nodeTabelle.selectSingleNode("BESCHREIBUNG").text) )
			end
			-- get service id
			local sid = string.sub("00000000" .. nodeTabelle.selectSingleNode("SERVICEID").text, -8)
			-- get addr
			local addr = string.sub("00000000" .. nodeTabelle.selectSingleNode("RDIDENTIFIER").text, -8)
			-- caculate code word
			local cwt = LibVW.zdcCalcCodeWord(nodeTabelle, debugLevel)
			if engine.LastError ~= 0 then
				engine.StatValue = "zdc caculate failed, zdc data invalid"
				engine.println("ERROR, ZdcCalcCalibration : code word caculate failed.")
				engine.LastError = 1 ; calibString=""
				return calibString
			end
			if nil ~= cwt.codeLen and 0 ~= cwt.codeLen then
				tmpResStr = tmpResStr .. sid .. addr .. string.format("%08x", cwt.codeLen) .. cwt.codeString
				blockSum = blockSum + 1
			else
				engine.println("ZdcCalcCalibration, coding skiped for address: " .. tostring(addr))
			end
		end	
	end
	-- add block number infor in the front of the code string 
	if blockSum &lt;= 0 then engine.println("WARNING, ZdcCalcCalibration : no calibration value found.") end
	tmpResStr = string.format("%08x", blockSum) .. tmpResStr
	engine.println("ZdcCalcCalibration, calibString caculate result hexstring : " .. tmpResStr)
	
	-- hex string convert to bin string
	calibString = ""
	for i=1,tmpResStr:len(),2 do	    
		calibString=calibString .. string.char(tonumber(tmpResStr:sub(i,i+1),16))
	end

         tmpResStr = "zdc calibration string=" .. tmpResStr ;
     if (string.len(tmpResStr) &gt; 240)  then
       tmpResStr = string.sub(tmpResStr,1,236) .. "...";  
       engine.println("length control :"..tostring(tmpResStr)) ;
     end;
	
	engine.StatValue = tmpResStr
	engine.LastError = err</Script></Function>

